/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KeyInitParameters struct {

	// The environment for the key. Default is "prod".
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The expiration time for the key in RFC3339 format (e.g., "2025-12-31T23:59:59Z"). Default is one year from the current date.
	// Expiration time in RFC3339 format (e.g., '2025-12-31T23:59:59Z')
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The organization identifier the key is associated with.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The project identifier the key is associated with.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region for the key. Default is "us-east".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A salt value used to generate deterministic API keys. Using the same salt value with the same inputs will always generate the same key.
	// Salt value to use for generating a deterministic API key
	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	// A list of scopes to associate with the key. These define the permissions granted to the key.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The signing key used to generate the API key. This is sensitive information.
	SigningKeySecretRef v1.SecretKeySelector `json:"signingKeySecretRef" tf:"-"`
}

type KeyObservation struct {

	// The environment for the key. Default is "prod".
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The expiration time for the key in RFC3339 format (e.g., "2025-12-31T23:59:59Z"). Default is one year from the current date.
	// Expiration time in RFC3339 format (e.g., '2025-12-31T23:59:59Z')
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The signature of the generated API key, used to identify this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The organization identifier the key is associated with.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The project identifier the key is associated with.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region for the key. Default is "us-east".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A salt value used to generate deterministic API keys. Using the same salt value with the same inputs will always generate the same key.
	// Salt value to use for generating a deterministic API key
	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	// A list of scopes to associate with the key. These define the permissions granted to the key.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The signature of the generated API key (same as id, for consistency with other resources).
	// The signature of the generated API key
	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`
}

type KeyParameters struct {

	// The environment for the key. Default is "prod".
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The expiration time for the key in RFC3339 format (e.g., "2025-12-31T23:59:59Z"). Default is one year from the current date.
	// Expiration time in RFC3339 format (e.g., '2025-12-31T23:59:59Z')
	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The organization identifier the key is associated with.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// The project identifier the key is associated with.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region for the key. Default is "us-east".
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A salt value used to generate deterministic API keys. Using the same salt value with the same inputs will always generate the same key.
	// Salt value to use for generating a deterministic API key
	// +kubebuilder:validation:Optional
	Salt *string `json:"salt,omitempty" tf:"salt,omitempty"`

	// A list of scopes to associate with the key. These define the permissions granted to the key.
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The signing key used to generate the API key. This is sensitive information.
	// +kubebuilder:validation:Optional
	SigningKeySecretRef v1.SecretKeySelector `json:"signingKeySecretRef" tf:"-"`
}

// KeySpec defines the desired state of Key
type KeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeyInitParameters `json:"initProvider,omitempty"`
}

// KeyStatus defines the observed state of Key.
type KeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Key is the Schema for the Keys API. Manages HSDP Tenant Keys
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hsdp}
type Key struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.project) || (has(self.initProvider) && has(self.initProvider.project))",message="spec.forProvider.project is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signingKeySecretRef)",message="spec.forProvider.signingKeySecretRef is a required parameter"
	Spec   KeySpec   `json:"spec"`
	Status KeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyList contains a list of Keys
type KeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Key `json:"items"`
}

// Repository type metadata.
var (
	Key_Kind             = "Key"
	Key_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Key_Kind}.String()
	Key_KindAPIVersion   = Key_Kind + "." + CRDGroupVersion.String()
	Key_GroupVersionKind = CRDGroupVersion.WithKind(Key_Kind)
)

func init() {
	SchemeBuilder.Register(&Key{}, &KeyList{})
}
