/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SqsSubscriberInitParameters struct {

	// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default is 0 (zero).
	DeliveryDelaySeconds *int64 `json:"deliveryDelaySeconds,omitempty" tf:"delivery_delay_seconds,omitempty"`

	// A short description of the subscriber
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default is 345600 (4 days).
	MessageRetentionPeriodSeconds *int64 `json:"messageRetentionPeriodSeconds,omitempty" tf:"message_retention_period_seconds,omitempty"`

	// The name infix of the subscriber
	NameInfix *string `json:"nameInfix,omitempty" tf:"name_infix,omitempty"`

	// The type of queue to create [Standard | FIFO]
	QueueType *string `json:"queueType,omitempty" tf:"queue_type,omitempty"`

	// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default is 0 (zero).
	ReceiveWaitTimeSeconds *int64 `json:"receiveWaitTimeSeconds,omitempty" tf:"receive_wait_time_seconds,omitempty"`

	// Boolean designating whether to enable server-side encryption. Default is true
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`
}

type SqsSubscriberObservation struct {

	// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default is 0 (zero).
	DeliveryDelaySeconds *int64 `json:"deliveryDelaySeconds,omitempty" tf:"delivery_delay_seconds,omitempty"`

	// A short description of the subscriber
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID reference of the subscriber (format: ${GUID})
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default is 345600 (4 days).
	MessageRetentionPeriodSeconds *int64 `json:"messageRetentionPeriodSeconds,omitempty" tf:"message_retention_period_seconds,omitempty"`

	// The name of the subscriber
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name infix of the subscriber
	NameInfix *string `json:"nameInfix,omitempty" tf:"name_infix,omitempty"`

	// The name of the SQS queue
	QueueName *string `json:"queueName,omitempty" tf:"queue_name,omitempty"`

	// The type of queue to create [Standard | FIFO]
	QueueType *string `json:"queueType,omitempty" tf:"queue_type,omitempty"`

	// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default is 0 (zero).
	ReceiveWaitTimeSeconds *int64 `json:"receiveWaitTimeSeconds,omitempty" tf:"receive_wait_time_seconds,omitempty"`

	// Boolean designating whether to enable server-side encryption. Default is true
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`

	// The status of the subscriber
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SqsSubscriberParameters struct {

	// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default is 0 (zero).
	// +kubebuilder:validation:Optional
	DeliveryDelaySeconds *int64 `json:"deliveryDelaySeconds,omitempty" tf:"delivery_delay_seconds,omitempty"`

	// A short description of the subscriber
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default is 345600 (4 days).
	// +kubebuilder:validation:Optional
	MessageRetentionPeriodSeconds *int64 `json:"messageRetentionPeriodSeconds,omitempty" tf:"message_retention_period_seconds,omitempty"`

	// The name infix of the subscriber
	// +kubebuilder:validation:Optional
	NameInfix *string `json:"nameInfix,omitempty" tf:"name_infix,omitempty"`

	// The type of queue to create [Standard | FIFO]
	// +kubebuilder:validation:Optional
	QueueType *string `json:"queueType,omitempty" tf:"queue_type,omitempty"`

	// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default is 0 (zero).
	// +kubebuilder:validation:Optional
	ReceiveWaitTimeSeconds *int64 `json:"receiveWaitTimeSeconds,omitempty" tf:"receive_wait_time_seconds,omitempty"`

	// Boolean designating whether to enable server-side encryption. Default is true
	// +kubebuilder:validation:Optional
	ServerSideEncryption *bool `json:"serverSideEncryption,omitempty" tf:"server_side_encryption,omitempty"`
}

// SqsSubscriberSpec defines the desired state of SqsSubscriber
type SqsSubscriberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SqsSubscriberParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SqsSubscriberInitParameters `json:"initProvider,omitempty"`
}

// SqsSubscriberStatus defines the observed state of SqsSubscriber.
type SqsSubscriberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SqsSubscriberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SqsSubscriber is the Schema for the SqsSubscribers API. Manages Connect DBS SQS Subscriber configurations
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hsdp}
type SqsSubscriber struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nameInfix) || (has(self.initProvider) && has(self.initProvider.nameInfix))",message="spec.forProvider.nameInfix is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.queueType) || (has(self.initProvider) && has(self.initProvider.queueType))",message="spec.forProvider.queueType is a required parameter"
	Spec   SqsSubscriberSpec   `json:"spec"`
	Status SqsSubscriberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SqsSubscriberList contains a list of SqsSubscribers
type SqsSubscriberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SqsSubscriber `json:"items"`
}

// Repository type metadata.
var (
	SqsSubscriber_Kind             = "SqsSubscriber"
	SqsSubscriber_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SqsSubscriber_Kind}.String()
	SqsSubscriber_KindAPIVersion   = SqsSubscriber_Kind + "." + CRDGroupVersion.String()
	SqsSubscriber_GroupVersionKind = CRDGroupVersion.WithKind(SqsSubscriber_Kind)
)

func init() {
	SchemeBuilder.Register(&SqsSubscriber{}, &SqsSubscriberList{})
}
