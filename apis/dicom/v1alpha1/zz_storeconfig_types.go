/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CdrServiceAccountInitParameters struct {

	// the service private key
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// the service id
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type CdrServiceAccountObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the service private key
	PrivateKey *string `json:"privateKey,omitempty" tf:"private_key,omitempty"`

	// the service id
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type CdrServiceAccountParameters struct {

	// the service private key
	// +kubebuilder:validation:Optional
	PrivateKey *string `json:"privateKey" tf:"private_key,omitempty"`

	// the service id
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId" tf:"service_id,omitempty"`
}

type FHIRStoreInitParameters struct {

	// the FHIR mpi endpoint
	MpiEndpoint *string `json:"mpiEndpoint,omitempty" tf:"mpi_endpoint,omitempty"`
}

type FHIRStoreObservation struct {

	// the FHIR mpi endpoint
	MpiEndpoint *string `json:"mpiEndpoint,omitempty" tf:"mpi_endpoint,omitempty"`
}

type FHIRStoreParameters struct {

	// the FHIR mpi endpoint
	// +kubebuilder:validation:Optional
	MpiEndpoint *string `json:"mpiEndpoint" tf:"mpi_endpoint,omitempty"`
}

type StoreConfigInitParameters struct {

	// Details of the CDR service account
	CdrServiceAccount []CdrServiceAccountInitParameters `json:"cdrServiceAccount,omitempty" tf:"cdr_service_account,omitempty"`

	// The base config URL of the DICOM Store instance
	ConfigURL *string `json:"configUrl,omitempty" tf:"config_url,omitempty"`

	// the FHIR store configuration
	FHIRStore []FHIRStoreInitParameters `json:"fhirStore,omitempty" tf:"fhir_store,omitempty"`

	// the IAM organization ID to use for authorization
	// +crossplane:generate:reference:type=github.com/philips-software/provider-hsdp/apis/iam/v1alpha1.Organization
	// +crossplane:generate:reference:refFieldName=OrganizationRef
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Selector for a Organization in iam to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.Selector `json:"organizationIdSelector,omitempty" tf:"-"`

	// Reference to a Organization in iam to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`
}

type StoreConfigObservation struct {

	// Details of the CDR service account
	CdrServiceAccount []CdrServiceAccountObservation `json:"cdrServiceAccount,omitempty" tf:"cdr_service_account,omitempty"`

	// The base config URL of the DICOM Store instance
	ConfigURL *string `json:"configUrl,omitempty" tf:"config_url,omitempty"`

	DataManagementURL *string `json:"dataManagementUrl,omitempty" tf:"data_management_url,omitempty"`

	// the FHIR store configuration
	FHIRStore []FHIRStoreObservation `json:"fhirStore,omitempty" tf:"fhir_store,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// the IAM organization ID to use for authorization
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// QIDO API endpoint URL
	QidoURL *string `json:"qidoUrl,omitempty" tf:"qido_url,omitempty"`

	// STOW API endpoint URL
	StowURL *string `json:"stowUrl,omitempty" tf:"stow_url,omitempty"`

	// WADO API endpoint URL
	WadoURL *string `json:"wadoUrl,omitempty" tf:"wado_url,omitempty"`
}

type StoreConfigParameters struct {

	// Details of the CDR service account
	// +kubebuilder:validation:Optional
	CdrServiceAccount []CdrServiceAccountParameters `json:"cdrServiceAccount,omitempty" tf:"cdr_service_account,omitempty"`

	// The base config URL of the DICOM Store instance
	// +kubebuilder:validation:Optional
	ConfigURL *string `json:"configUrl,omitempty" tf:"config_url,omitempty"`

	// the FHIR store configuration
	// +kubebuilder:validation:Optional
	FHIRStore []FHIRStoreParameters `json:"fhirStore,omitempty" tf:"fhir_store,omitempty"`

	// the IAM organization ID to use for authorization
	// +crossplane:generate:reference:type=github.com/philips-software/provider-hsdp/apis/iam/v1alpha1.Organization
	// +crossplane:generate:reference:refFieldName=OrganizationRef
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Selector for a Organization in iam to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.Selector `json:"organizationIdSelector,omitempty" tf:"-"`

	// Reference to a Organization in iam to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationRef *v1.Reference `json:"organizationRef,omitempty" tf:"-"`
}

// StoreConfigSpec defines the desired state of StoreConfig
type StoreConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StoreConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StoreConfigInitParameters `json:"initProvider,omitempty"`
}

// StoreConfigStatus defines the observed state of StoreConfig.
type StoreConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StoreConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StoreConfig is the Schema for the StoreConfigs API. Manages HSDP DICOM Store configurations
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,hsdp}
type StoreConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configUrl) || (has(self.initProvider) && has(self.initProvider.configUrl))",message="spec.forProvider.configUrl is a required parameter"
	Spec   StoreConfigSpec   `json:"spec"`
	Status StoreConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoreConfigList contains a list of StoreConfigs
type StoreConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoreConfig `json:"items"`
}

// Repository type metadata.
var (
	StoreConfig_Kind             = "StoreConfig"
	StoreConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StoreConfig_Kind}.String()
	StoreConfig_KindAPIVersion   = StoreConfig_Kind + "." + CRDGroupVersion.String()
	StoreConfig_GroupVersionKind = CRDGroupVersion.WithKind(StoreConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&StoreConfig{}, &StoreConfigList{})
}
